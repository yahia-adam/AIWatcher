[tool.poetry]
name = "aiwatcher"
version = "0.1.0"
description = "Un scraper intelligent qui collecte les derniers articles sur l'intelligence artificielle (recherches, actualités, innovations), les résume automatiquement, détecte les entités clés (NER) comme auteurs, laboratoires et modèles, puis expose le tout via une API prête pour la production."
authors = ["YAHIA ABDCHAFEE Adam <adam.y.abdc@gmail.com>"]
readme = "README.md"
packages = [{include = "aiwatcher", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.23"
psycopg2-binary = "^2.9.9"
beautifulsoup4 = "^4.12.2"
requests = "^2.31.0"
lxml = "^4.9.3"
transformers = "^4.35.0"
torch = "^2.1.0"
pandas = "^2.1.3"
redis = "^5.0.1"
alembic = "^1.12.1"
pydantic = "^2.5.0"
python-multipart = "^0.0.6"
aiofiles = "^23.2.1"
pydantic-settings = "^2.10.1"
eralchemy2 = "^1.4.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.5.0"
httpx = "^0.25.2"

[tool.poetry.group.test.dependencies]
pytest-mock = "^3.12.0"
factory-boy = "^3.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]